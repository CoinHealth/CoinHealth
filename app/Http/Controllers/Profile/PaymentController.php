<?php

namespace App\Http\Controllers\Profile;

use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use App\Models\Payment;
use App\Models\Patient;
use App\Jobs\Logs\MakeLog;
use Hashids\Hashids;
use PDF;
class PaymentController extends Controller
{
    public function __construct()
    {
        // $this->middleware('ehrmiddleware');
    }

    public function getIndex()
    {
        // dd(auth()->user()->payments->first()->patient->name );
        return view('profile.payments.index');
    }

    public function addPayment(Request $request)
    {
        $data = $request->all();
        $data['company_id'] = auth()->user()->id;
        $data['user_id'] = auth()->user()->id;
        $data['patient_id'] = $data['patient']['value'];
        $invoice = Payment::all()->last();
        if ($invoice == null || $invoice == 'undefined') {
          $invoice = 1;
        } else {
          $invoice = $invoice->id + 1;
        }
        // $year = date('Y');
        $data['invoice_no'] = 'CPEHR' . sprintf('%06d', $invoice);
        $payment = Payment::create($data);
        $logs = [
            'subscriber_id' => $data['company_id'],
            'description' => 'Provider make a billing ' . $payment->invoice_no,
            'recordable_id' => $payment->id,
            'recordable_type' => 'App\Models\Payment', 
            'taggable_id' => $payment->patient_id,
            'taggable_type' => 'App\Models\Patient',
        ];
        dispatch(new MakeLog($logs));
        $patient = Patient::find($data['patient_id']);        
        return response()->json([
            'success' => true,
            'id' => $payment->hashed_id,
            'patient' => $patient->id,
        ]);
    }

    public function getList()
    {
        // $ids= \DB::select('SELECT max(id) as id FROM payments group by patient_id') ;
        // $array = [];
        // foreach($ids as $id) {
        //    array_push($array, $id->id);
        // } 

        // $payments = auth()->user()->payments2
        //     ->groupBy('patient_id');
            // ->whereIn('id',  $array);
        $patients = auth()->user()->patients()
                    ->whereHas('payments', function($q) {
                        $q->orderBy('id', 'desc');
                    })
                    ->with('payments')
                    ->with('payment_logs')
                    ->groupBy('patient_id')
                    ->orderBy('id', 'desc')
                    ->get();
        // dd($patients->first());
        return response()->json([
            'success' => true,
            'data' => $patients,
        ]);
    }

    public function getPatients() 
    {
        $user = auth()->user();
        $patients = $user->patients;
        return response()->json([
            'success' => true,
            'patients' => $patients,
        ]);
    }

    public function generateInvoice($id)
    {
        $hashids = new Hashids(config('services.hashid.salt'), 8);
        $id = $hashids->decode($id)[0];
        $payment = Payment::find($id);
        $data = [
            'payment' => $payment,
        ];
        $pdf = PDF::loadView('pdf.payments.patient', $data);
                 // ->setOption('footer-center', '*This serves as an official receipt. Powered and generated by <a href="https://careparrot.com" target="_blank">Careparrot</a> in affiliation with this Provider.');
        // $pdf->output();
        return $pdf->stream();
    }


    public function changeStatus(Request $request) 
    {
        $data = $request->all();
        // dd($data);
        $payment = Payment::where('invoice_no', $data['invoice_no'])->first();
        // dd($payment);
        $update = $payment->update([
                'status' => $data['status'],
            ]);
        $logs = [
            'subscriber_id' => auth()->user()->id,
            'description' => 'Provider change billing status to ' . $payment->payment_status . ' ' . $payment->invoice_no,
            'recordable_id' => $payment->id,
            'recordable_type' => 'App\Models\Payment', 
            'taggable_id' => $payment->patient_id,
            'taggable_type' => 'App\Models\Patient',
        ];
        dispatch(new MakeLog($logs));
        return response()->json([
            'success' => true,
            'id' => $payment->hashed_id, 
            'payment' => $payment->load('patient'),
        ]);
    }
}
